/* 座標取得・画像取得関係 */
#module GetPic
	#uselib "gdi32.dll"
		#func  BitBlt "BitBlt" int,int,int,int,int,int,int,int,int
		#cfunc CreateDC "CreateDCA" sptr,sptr,sptr,int
		#func  DeleteDC "DeleteDC" int
	#uselib "user32.dll"
		#cfunc GetSystemMetrics "GetSystemMetrics" int
		#cfunc WindowFromPoint "WindowFromPoint" int, int
		#func  GetWindowRect "GetWindowRect" int, int
	// API関係の定数
	#const NULL 0
	#const SRCCOPY    0x00CC0020
	#const CAPTUREBLT 0x40000000
	#const SM_XVIRTUALSCREEN  0x0000004C
	#const SM_YVIRTUALSCREEN  0x0000004D
	#const SM_CXVIRTUALSCREEN 0x0000004E
	#const SM_CYVIRTUALSCREEN 0x0000004F
	// API関係ではない定数
	#const RECT_SIZE 4
	#const VIRTUAL_SCREEN_ID 10
	#const CLICK_SCREEN_ID   11
	#const TEMP_BUFFER_ID    12
	// GetPicモジュールを初期化
	#deffunc initGetPic
		// 仮想画面の左上座標および大きさを取得
		virtual_screen_px = GetSystemMetrics(SM_XVIRTUALSCREEN)
		virtual_screen_py = GetSystemMetrics(SM_YVIRTUALSCREEN)
		virtual_screen_wx = GetSystemMetrics(SM_CXVIRTUALSCREEN)
		virtual_screen_wy = GetSystemMetrics(SM_CYVIRTUALSCREEN)
	return
	// クリックした画面を捕捉する
	#defcfunc getWindowPositionByClick
		// 仮想画面全体をスクショして、縁無しウィンドウ表示する
		buffer VIRTUAL_SCREEN_ID, virtual_screen_wx, virtual_screen_wy
		hdc_screen = CreateDC("DISPLAY", NULL, NULL, NULL)
		BitBlt hdc, 0, 0, virtual_screen_wx, virtual_screen_wy, hdc_screen, virtual_screen_px, virtual_screen_py, SRCCOPY | CAPTUREBLT
		DeleteDC hdc_screen
		bgscr CLICK_SCREEN_ID, virtual_screen_wx, virtual_screen_wy,,virtual_screen_px, virtual_screen_py
		gsel CLICK_SCREEN_ID, 2
		gcopy VIRTUAL_SCREEN_ID, 0, 0, virtual_screen_wx, virtual_screen_wy
		// 戦艦少女のウィンドウをクリックさせる
		;dialog "戦艦少女の画面をクリックしてください.", 0, SOFT_NAME
		click_flg = FALSE
		repeat
			stick key
			if(key & 256){
				window_position_x = mousex + virtual_screen_px
				window_position_y = mousey + virtual_screen_py
				click_flg = TRUE
				break
			}
			if(key & 128){
				break
			}
			wait 5
		loop
		gsel CLICK_SCREEN_ID, -1
		if(click_flg == FALSE) :resetGetPos :return FALSE
		// クリック位置から対象のウィンドウのハンドル・位置・サイズを取得する
		window_handle = WindowFromPoint(window_position_x, window_position_y)
		dim rect, RECT_SIZE
		GetWindowRect window_handle, varptr(rect)
		// 周囲の黒枠を削除する処理
		dim crop_rect, 4
		color :getSquareInner rect, crop_rect, window_position_x, window_position_y, TRUE
		window_px = crop_rect(0)
		window_py = crop_rect(1)
		window_wx = crop_rect(2) - crop_rect(0) + 1
		window_wy = crop_rect(3) - crop_rect(1) + 1
		// とりあえずずれ検知しておく
		if(isPositionShifting()) :return FALSE
		// フラグ処理
		getpos_flg@Config = TRUE
	return TRUE
	// 捕捉した画面を保存する
	#defcfunc saveWindowImage
		// 座標が取得できていなければ保存を行わない
		if(getpos_flg@Config == FALSE) :return ""
		// 画像をBitBltで取得する
		buffer TEMP_BUFFER_ID, window_wx, window_wy
		hdc_screen = CreateDC("DISPLAY", NULL, NULL, NULL)
		BitBlt hdc, 0, 0, window_wx, window_wy, hdc_screen, window_px, window_py, SRCCOPY | CAPTUREBLT
		DeleteDC hdc_screen
		// 取得した画像を保存する
		file_name = getNowTimeStr() + ".png"
		pngsave getNowTimeStr()
	return file_name
	// ズレを検知する
	#defcfunc isPositionShifting
		// そもそも座標取得していなければズレを検知しようがない
		if(getpos_flg@Config == FALSE) :return FALSE
		// 取得している座標よりも1ピクセルだけ大きく画像を取得する
		buffer TEMP_BUFFER_ID, window_wx + 2, window_wy + 2
		hdc_screen = CreateDC("DISPLAY", NULL, NULL, NULL)
		BitBlt hdc, 0, 0, window_wx + 2, window_wy + 2, hdc_screen, window_px - 1, window_py - 1, SRCCOPY | CAPTUREBLT
		DeleteDC hdc_screen
		// 四隅の色が黒色(背景色)でなければ、ズレたと判断する
		pget 0, 0                         :if(ginfo_r + ginfo_g + ginfo_b != 0) :resetGetPos :return TRUE
		pget 0, window_wy + 1             :if(ginfo_r + ginfo_g + ginfo_b != 0) :resetGetPos :return TRUE
		pget window_wx + 1, 0             :if(ginfo_r + ginfo_g + ginfo_b != 0) :resetGetPos :return TRUE
		pget window_wx + 1, window_wy + 1 :if(ginfo_r + ginfo_g + ginfo_b != 0) :resetGetPos :return TRUE
		// おまじない
		resetCurrentWindow
	return FALSE
#global
